import Foundation\nimport Combine\n\nstruct Achievement: Identifiable, Codable {\n    let id: String\n    let name: String\    let description: String\n    var isUnlocked: Bool\n}\n\nclass AchievementService: ObservableObject {\n    @Published private var achievements: [Achievement] = []\n    private let achievementsKey = \"gameAchievements\"\n    \n    // Define all possible achievements\n    private let allAchievements: [Achievement] = [\n        Achievement(id: \"first_tap\", name: \"First Tap!\", description: \"Tap the shape for the first time.\", isUnlocked: false),\n        Achievement(id: \"tapper_beginner\", name: \"Tapper Beginner\", description: \"Accumulate 100 taps across all games.\", isUnlocked: false),\n        Achievement(id: \"score_50\", name: \"Score of 50!\", description: \"Achieve a score of 50 or more in a single game.\", isUnlocked: false),\n        Achievement(id: \"time_master\", name: \"Time Master\", description: \"Play 10 games.\", isUnlocked: false)\n    ]\n    \n    init() {\n        loadAchievements()\n    }\n    \n    func loadAchievements() {\n        if let data = UserDefaults.standard.data(forKey: achievementsKey) {\n            let decodedAchievements = (try? JSONDecoder().decode([Achievement].self, from: data)) ?? []\n            \n            // Merge saved state with current definitions\n            var updatedAchievements = allAchievements\n            for i in 0..<updatedAchievements.count {\n                if let savedAchievement = decodedAchievements.first(where: { $0.id == updatedAchievements[i].id }) {\n                    updatedAchievements[i].isUnlocked = savedAchievement.isUnlocked\n                }\n            }\n            self.achievements = updatedAchievements\n        } else {\\n            self.achievements = allAchievements\n        }\n    }\n    \n    func saveAchievements() {\n        if let encoded = try? JSONEncoder().encode(achievements) {\n            UserDefaults.standard.set(encoded, forKey: achievementsKey)\n        }\n    }\n    \n    // Method to check and unlock an achievement by ID\n    func unlockAchievement(id: String) {\n        if let index = achievements.firstIndex(where: { $0.id == id }), !achievements[index].isUnlocked {\n            achievements[index].isUnlocked = true\n            saveAchievements()\n            print(\"Achievement Unlocked: \\(achievements[index].name)\") // For testing\n            // TODO: Add visual notification\n        }\n    }\n    \n    // Method to get the list of achievements\n    func getAchievements() -> [Achievement] {\n        return achievements\n    }\n    \n    // Methods to update progress for specific achievements
    // (Implement these later when connecting to game logic)
    func incrementTotalTaps(count: Int) {\n        // This will require storing total taps, not just per-game taps\n    }\n    \n    func gamePlayed() {\n        // This will require storing game count\n    }\n    \n    func checkScoreAchievement(score: Int) {\n        // Check if score meets criteria for score-based achievements\n        if score >= 50 {\n            unlockAchievement(id: \"score_50\")\n        }\n    }\n}\n 